"qz)
outcomedata<-read.csv("outcome-of-care-measures.csv", colClasses = "character", header=TRUE)
possible_outcome<-c("heart attack", "heart failure", "pneumonia")
outcome_col<-c(11,17,23)
col_numero<-outcome_col[possible_outcome==outcome]
outcomedata[,col_numero]<-as.numeric(outcomedata[,col_numero])
View(outcomedata)
outcomedata<-read.csv("outcome-of-care-measures.csv", colClasses = "character", header=TRUE)
possible_outcome<-c("heart attack", "heart failure", "pneumonia")
outcome_col<-c(11,17,23)
col_numero<-outcome_col[possible_outcome==outcome]
outcomedata[,col_numero]<-as.numeric(outcomedata[,col_numero])
hospital_data<-subset(outcomedata[c(2,7,col_numero)],State==state,na.rm=TRUE)
num<-as.numeric(which.min(hospital_data[,3]))
sort(hospital_data$Hospital.Name[num])[1]
View(hospital_data)
num<-as.numeric(which.min(hospital_data[,3],na.rm=TRUE))
?which.min()
hospital_data<-subset(outcomedata[c(2,7,col_numero)],State==state,na.rm=TRUE)
View(hospital_data)
?min()
?which()
num<-as.numeric(which(min(hospital_data[,3]) %in% hospital_data[,3]))
num<-which(min(hospital_data[,3]) %in% hospital_data[,3])
min(hospital_data[,3])
min(hospital_data[,3],na.rm=TRUE)
which(min(hospital_data[,3],na.rm=TRUE) %in% hospital_data[,3])
?arrayInd()
?which()
View(hospital_data)
min(hospital_data[,3],na.rm=TRUE)
num<-which(min(hospital_data[,3],na.rm=TRUE) == hospital_data[,3])
View(hospital_data)
num<-as.numeric(which(min(hospital_data[,3],na.rm=TRUE) == hospital_data[,3]))
source("best.R")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
View(outcomedata)
?complete.cases()
View(hospital_data)
hospital_data<-hospital_data[complete.cases(hospital_data),]
View(hospital_data)
?order()
hospital_data[order(hospital_data[,3],hospital_data[,1]),]
hospital_data_sorted<-hospital_data[order(hospital_data[,3],hospital_data[,1]),]
View(hospital_data_sorted)
hospital_data_sorted[nrow(hospital_data_sorted),1]
NA
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
outcomedata<-read.csv("outcome-of-care-measures.csv", colClasses = "character", header=TRUE)
possible_outcome<-c("heart attack", "heart failure", "pneumonia")
outcome_col<-c(11,17,23)
col_numero<-outcome_col[possible_outcome==outcome]
outcomedata[,col_numero]<-as.numeric(outcomedata[,col_numero])
## Check that state and outcome are valid
if (!(state %in% outcomedata[,7])) {stop("invalid state")}
if (!(outcome %in% possible_outcome)){stop("invalid outcome")}
## Get the subset with choosen data cleared from NA
hospital_data<-subset(outcomedata[c(2,7,col_numero)],State==state,na.rm=TRUE)
hospital_data<-hospital_data[complete.cases(hospital_data),]
## Sort this subset by hospital rank
hospital_data_sorted<-hospital_data[order(hospital_data[,3],hospital_data[,1]),]
## Return hospital name in that state with the given rank
if (num = "best") {hospital_data_sorted[1,1]}
if (num = "worst") {hospital_data_sorted[nrow(hospital_data_sorted),1]}
if (num > nrow(hospital_data_sorted)){NA} else {hospital_data_sorted[num,1]}
## 30-day death rate
}
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
outcomedata<-read.csv("outcome-of-care-measures.csv", colClasses = "character", header=TRUE)
possible_outcome<-c("heart attack", "heart failure", "pneumonia")
outcome_col<-c(11,17,23)
col_numero<-outcome_col[possible_outcome==outcome]
outcomedata[,col_numero]<-as.numeric(outcomedata[,col_numero])
## Check that state and outcome are valid
if (!(state %in% outcomedata[,7])) {stop("invalid state")}
if (!(outcome %in% possible_outcome)){stop("invalid outcome")}
## Get the subset with choosen data cleared from NA
hospital_data<-subset(outcomedata[c(2,7,col_numero)],State==state,na.rm=TRUE)
hospital_data<-hospital_data[complete.cases(hospital_data),]
## Sort this subset by hospital rank
hospital_data_sorted<-hospital_data[order(hospital_data[,3],hospital_data[,1]),]
## Return hospital name in that state with the given rank
if (num == "best") {hospital_data_sorted[1,1]}
if (num == "worst") {hospital_data_sorted[nrow(hospital_data_sorted),1]}
if (num > nrow(hospital_data_sorted)){NA} else {hospital_data_sorted[num,1]}
## 30-day death rate
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MD", "heart attack", "worst")
hospital_data_sorted[nrow(hospital_data_sorted),1]
rankhospital("MD", "heart attack", "worst")
state<-"MD"
outcome<-"heart attack"
num<-"worst"
which(c("best",2:nrow(hospital_data),"worst") == as.character(num))
which(c("best",2:(nrow(hospital_data)-1),"worst") == as.character(num))
num<-12
which(c("best",2:(nrow(hospital_data)-1),"worst") == as.character(num))
num<-1255
which(c("best",2:(nrow(hospital_data)-1),"worst") == as.character(num))
?which
if (ind == 0) {NA} else {hospital_data_sorted[ind,1]}
ind<-which(c("best",2:(nrow(hospital_data)-1),"worst") == as.character(num))
if (ind == 0) {NA} else {hospital_data_sorted[ind,1]}
if (ind == integer(0) {NA} else {hospital_data_sorted[ind,1]}
if (ind == integer(0)) {NA} else {hospital_data_sorted[ind,1]}
if (length(ind) == 0) {NA} else {hospital_data_sorted[ind,1]}
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
outcomedata<-read.csv("outcome-of-care-measures.csv", colClasses = "character", header=TRUE)
possible_outcome<-c("heart attack", "heart failure", "pneumonia")
outcome_col<-c(11,17,23)
col_numero<-outcome_col[possible_outcome==outcome]
outcomedata[,col_numero]<-as.numeric(outcomedata[,col_numero])
## Check that state and outcome are valid
if (!(state %in% outcomedata[,7])) {stop("invalid state")}
if (!(outcome %in% possible_outcome)){stop("invalid outcome")}
## Get the subset with choosen data cleared from NA
hospital_data<-subset(outcomedata[c(2,7,col_numero)],State==state,na.rm=TRUE)
hospital_data<-hospital_data[complete.cases(hospital_data),]
## Sort this subset by hospital rank
hospital_data_sorted<-hospital_data[order(hospital_data[,3],hospital_data[,1]),]
## Return hospital name in that state with the given rank
## 30-day death rate
ind<-which(c("best",2:(nrow(hospital_data)-1),"worst") == as.character(num))
if (length(ind) == 0) {NA} else {hospital_data_sorted[ind,1]}
}
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rankhospital("MN", "heart attack", -50)
rankhospital("MN", "heart attack", "good")
rankhospital("TX", "heart failure", 4)
submit()
submit()
submit()
submit()
View(outcomedata)
## Read outcome data
outcomedata<-read.csv("outcome-of-care-measures.csv", colClasses = "character", header=TRUE)
possible_outcome<-c("heart attack", "heart failure", "pneumonia")
outcome_col<-c(11,17,23)
col_numero<-outcome_col[possible_outcome==outcome]
outcomedata[,col_numero]<-as.numeric(outcomedata[,col_numero])
## Check that the outcome is valid
if (!(outcome %in% possible_outcome)){stop("invalid outcome")}
## Remove NA
outcomedata<-outcomedata[complete.cases(outcomedata[,col_numero]),]
View(outcomedata)
?split()
View(outcomedata)
ranksort<-function(hosp_data,state,num) {
hosp_data<-hosp_data[complete.cases(hosp_data),]
## Sort this subset by hospital rank
hospital_data_sorted<-hosp_data[order(hosp_data[,3],hosp_data[,1]),]
## Return hospital name in that state with the given rank
## 30-day death rate
ind<-which(c("best",2:(nrow(hosp_data)-1),"worst") == as.character(num))
if (length(ind) == 0) {NA} else {hospital_data_sorted[ind,1]}
}
outcomedata<-read.csv("outcome-of-care-measures.csv", colClasses = "character", header=TRUE)
possible_outcome<-c("heart attack", "heart failure", "pneumonia")
outcome_col<-c(11,17,23)
col_numero<-outcome_col[possible_outcome==outcome]
outcomedata[,col_numero]<-as.numeric(outcomedata[,col_numero])
## Check that the outcome is valid
if (!(outcome %in% possible_outcome)){stop("invalid outcome")}
## Remove NA
outcomedata<-outcomedata[complete.cases(outcomedata[,col_numero]),]
## Get the subset with choosen data cleared from NA
sapply(split(outcomedata[c(2,7,col_numero)], outcomedata$State), ranksort)
hospital_data<-subset(outcomedata[c(2,7,col_numero)],State==state,na.rm=TRUE)
View(hospital_data)
split(outcomedata[c(2,7,col_numero)], outcomedata$State)
?mean()
sapply(split(outcomedata[c(2,7,col_numero)], outcomedata$State), ranksort)
sapply(split(outcomedata[c(2,7,col_numero)], outcomedata$State), ranksort(...,num))
sapply(split(outcomedata[c(2,7,col_numero)], outcomedata$State), ranksort(num))
?sapply()
ranksort<-function(hosp_data) {
## Sort this subset by hospital rank
hospital_data_sorted<-hosp_data[order(hosp_data[,3],hosp_data[,1]),]
## Return hospital name in that state with the given rank
## 30-day death rate
ind<-which(c("best",2:(nrow(hosp_data)-1),"worst") == as.character(num))
if (length(ind) == 0) {NA} else {hospital_data_sorted[ind,1]}
}
## Read outcome data
outcomedata<-read.csv("outcome-of-care-measures.csv", colClasses = "character", header=TRUE)
possible_outcome<-c("heart attack", "heart failure", "pneumonia")
outcome_col<-c(11,17,23)
col_numero<-outcome_col[possible_outcome==outcome]
outcomedata[,col_numero]<-as.numeric(outcomedata[,col_numero])
## Check that the outcome is valid
if (!(outcome %in% possible_outcome)){stop("invalid outcome")}
## Remove NA
outcomedata<-outcomedata[complete.cases(outcomedata[,col_numero]),]
num<-12
sapply(split(outcomedata[c(2,7,col_numero)], outcomedata$State), ranksort)
num<-20
ranksort<-function(hosp_data) {
## Sort this subset by hospital rank
hospital_data_sorted<-hosp_data[order(hosp_data[,3],hosp_data[,1]),]
## Return hospital name in that state with the given rank
## 30-day death rate
ind<-which(c("best",2:(nrow(hosp_data)-1),"worst") == as.character(num))
if (length(ind) == 0) {NA} else {hospital_data_sorted[ind,1]}
}
sapply(split(outcomedata[c(2,7,col_numero)], outcomedata$State), ranksort)
res<-sapply(split(outcomedata[c(2,7,col_numero)], outcomedata$State), ranksort)
typeof(res)
dim(res)
ncol(res)
colnum(res)
nrow(res)
res<-lapply(split(outcomedata[c(2,7,col_numero)], outcomedata$State), ranksort)
res
res<-as.data.frame(lapply(split(outcomedata[c(2,7,col_numero)], outcomedata$State), ranksort))
View(res)
?vapply
## Get the subset with choosen data cleared from NA
res<-vapply(split(outcomedata[c(2,7,col_numero)], outcomedata$State), ranksort,data.frame)
res<-vapply(split(outcomedata[c(2,7,col_numero)], outcomedata$State), ranksort)
aggregate(outcomedata[c(2,7,col_numero)],outcomedata$State,ranksort)
aggregate(split(outcomedata[c(2,7,col_numero)],outcomedata$State),ranksort)
res<-lapply(split(outcomedata[c(2,7,col_numero)], outcomedata$State), ranksort)
df <- data.frame(matrix(unlist(res), nrow=54, byrow=T))
View(df)
dff <- as.data.frame(res)
View(dff)
View(dff)
feee <- cbind(dff,colnames(dff))
View(feee)
feee <- rbind(dff,colnames(dff))
View(feee)
colnames(dff)
feee <- matrix(dff,colnames(dff))
feee <- data.frame(dff,colnames(dff))
View(feee)
feee <- c(dff,colnames(dff))
feee <- as.data.frame(c(dff,colnames(dff)))
View(feee)
feee <- as.data.frame(c(dff,colnames(dff)),nrow=54, byrow=T)
View(df)
df <- t(data.frame(matrix(unlist(res), nrow=54, byrow=T)))
View(df)
df <- t(data.frame(matrix(unlist(res), nrow=54, byrow=T)))
View(df)
View(dff)
df <- data.frame(matrix(unlist(res), nrow=54, bycol=T))
df <- data.frame(matrix(unlist(res), nrow=54, byrow = F))
View(df)
df <- data.frame(matrix(unlist(res), byrow = F))
df <- data.frame(matrix(unlist(res), byrow = F))
View(df)
unlist(res)
sdf<-unlist(res)
sdf
typeof(sdf)
data.frame(
lNames = rep(names(res), lapply(res, length)),
lVal = unlist(res))
data.frame(
lVal = unlist(res),
lNames = rep(names(res), lapply(res, length)))
data.frame(
hospital = unlist(res),
state = rep(names(res), lapply(res, length)))
rankall <- function(outcome, num = "best") {
## Read outcome data
outcomedata<-read.csv("outcome-of-care-measures.csv", colClasses = "character", header=TRUE)
possible_outcome<-c("heart attack", "heart failure", "pneumonia")
outcome_col<-c(11,17,23)
col_numero<-outcome_col[possible_outcome==outcome]
outcomedata[,col_numero]<-as.numeric(outcomedata[,col_numero])
## Check that the outcome is valid
if (!(outcome %in% possible_outcome)){stop("invalid outcome")}
## Remove NA
outcomedata<-outcomedata[complete.cases(outcomedata[,col_numero]),]
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
res<-lapply(split(outcomedata[c(2,7,col_numero)], outcomedata$State), ranksort)
data.frame(
hospital = unlist(res),
state = rep(names(res), lapply(res, length)))
}
ranksort<-function(hosp_data) {
## Sort this subset by hospital rank
hospital_data_sorted<-hosp_data[order(hosp_data[,3],hosp_data[,1]),]
## Return hospital name in that state with the given rank
## 30-day death rate
ind<-which(c("best",2:(nrow(hosp_data)-1),"worst") == as.character(num))
if (length(ind) == 0) {NA} else {hospital_data_sorted[ind,1]}
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
outcomedata<-read.csv("outcome-of-care-measures.csv", colClasses = "character", header=TRUE)
possible_outcome<-c("heart attack", "heart failure", "pneumonia")
outcome_col<-c(11,17,23)
col_numero<-outcome_col[possible_outcome==outcome]
outcomedata[,col_numero]<-as.numeric(outcomedata[,col_numero])
## Check that the outcome is valid
if (!(outcome %in% possible_outcome)){stop("invalid outcome")}
## Remove NA
outcomedata<-outcomedata[complete.cases(outcomedata[,col_numero]),]
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
res<-lapply(split(outcomedata[c(2,7,col_numero)], outcomedata$State), ranksort)
data.frame(
hospital = unlist(res),
state = rep(names(res), lapply(res, length)))
}
ranksort<-function(hosp_data) {
## Sort this subset by hospital rank
hospital_data_sorted<-hosp_data[order(hosp_data[,3],hosp_data[,1]),]
## Return hospital name in that state with the given rank
## 30-day death rate
ind<-which(c("best",2:(nrow(hosp_data)-1),"worst") == as.character(num))
if (length(ind) == 0) {NA} else {hospital_data_sorted[ind,1]}
}
tail(rankall("heart failure"), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
outcomedata<-read.csv("outcome-of-care-measures.csv", colClasses = "character", header=TRUE)
possible_outcome<-c("heart attack", "heart failure", "pneumonia")
outcome_col<-c(11,17,23)
col_numero<-outcome_col[possible_outcome==outcome]
outcomedata[,col_numero]<-as.numeric(outcomedata[,col_numero])
## Check that the outcome is valid
if (!(outcome %in% possible_outcome)){stop("invalid outcome")}
## Remove NA
outcomedata<-outcomedata[complete.cases(outcomedata[,col_numero]),]
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
res<-lapply(split(outcomedata[c(2,7,col_numero)], outcomedata$State), ranksort)
data.frame(
hospital = unlist(res),
state = rep(names(res), lapply(res, length)))
}
ranksort<-function(hosp_data, num = num) {
## Sort this subset by hospital rank
hospital_data_sorted<-hosp_data[order(hosp_data[,3],hosp_data[,1]),]
## Return hospital name in that state with the given rank
## 30-day death rate
ind<-which(c("best",2:(nrow(hosp_data)-1),"worst") == as.character(num))
if (length(ind) == 0) {NA} else {hospital_data_sorted[ind,1]}
}
tail(rankall("heart failure"), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
outcomedata<-read.csv("outcome-of-care-measures.csv", colClasses = "character", header=TRUE)
possible_outcome<-c("heart attack", "heart failure", "pneumonia")
outcome_col<-c(11,17,23)
col_numero<-outcome_col[possible_outcome==outcome]
outcomedata[,col_numero]<-as.numeric(outcomedata[,col_numero])
## Check that the outcome is valid
if (!(outcome %in% possible_outcome)){stop("invalid outcome")}
## Remove NA
outcomedata<-outcomedata[complete.cases(outcomedata[,col_numero]),]
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
res<-lapply(split(outcomedata[c(2,7,col_numero)], outcomedata$State), function(hosp_data) {
## Sort this subset by hospital rank
hospital_data_sorted<-hosp_data[order(hosp_data[,3],hosp_data[,1]),]
## Return hospital name in that state with the given rank
## 30-day death rate
ind<-which(c("best",2:(nrow(hosp_data)-1),"worst") == as.character(num))
if (length(ind) == 0) {NA} else {hospital_data_sorted[ind,1]}
})
data.frame(
hospital = unlist(res),
state = rep(names(res), lapply(res, length)))
}
tail(rankall("heart failure"), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
outcomedata<-read.csv("outcome-of-care-measures.csv", colClasses = "character", header=TRUE)
possible_outcome<-c("heart attack", "heart failure", "pneumonia")
outcome_col<-c(11,17,23)
col_numero<-outcome_col[possible_outcome==outcome]
outcomedata[,col_numero]<-as.numeric(outcomedata[,col_numero])
## Check that the outcome is valid
if (!(outcome %in% possible_outcome)){stop("invalid outcome")}
## Remove NA
outcomedata<-outcomedata[complete.cases(outcomedata[,col_numero]),]
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
res<-lapply(split(outcomedata[c(2,7,col_numero)], outcomedata$State),
function(hosp_data) {
## Sort this subset by hospital rank
hospital_data_sorted<-hosp_data[order(hosp_data[,3],hosp_data[,1]),]
## Return hospital name in that state with the given rank
## 30-day death rate
ind<-which(c("best",2:(nrow(hosp_data)-1),"worst") == as.character(num))
if (length(ind) == 0) {NA} else {hospital_data_sorted[ind,1]}
})
## Change the presentation from list to data frame
data.frame(
hospital = unlist(res),
state = rep(names(res), lapply(res, length)))
}
tail(rankall("pneumonia", "worst"), 3)
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
submit()
10
set.seed(1)
rpois(5, 2)
str(set.seed)
?set.seed
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot(y)
histogram(y)
hist(y)
sort(y)
hist(sort(y))
hist(plot(y))
plot(sort(y))
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
?stop()
?unique
best <- function(state, outcome) {
## Read outcome data
outcomedata<-read.csv("outcome-of-care-measures.csv", colClasses = "character", header=TRUE)
possible_outcome<-c("heart attack", "heart failure", "pneumonia")
outcome_col<-c(11,17,23)
col_numero<-outcome_col[possible_outcome==outcome]
outcomedata[,col_numero]<-as.numeric(outcomedata[,col_numero])
## Check that state and outcome are valid
if (!(state %in% outcomedata[,7])) {stop("invalid state")}
if (!(outcome %in% possible_outcome)){stop("invalid outcome")}
## Return hospital name in that state with lowest 30-day death
## rate
hospital_data<-subset(outcomedata[c(2,7,col_numero)],State==state,na.rm=TRUE)
num<-as.numeric(which(min(hospital_data[,3],na.rm=TRUE) == hospital_data[,3]))
sort(hospital_data$Hospital.Name[num])[1]
}
## Read outcome data
outcomedata<-read.csv("outcome-of-care-measures.csv", colClasses = "character", header=TRUE)
possible_outcome<-c("heart attack", "heart failure", "pneumonia")
outcome_col<-c(11,17,23)
col_numero<-outcome_col[possible_outcome==outcome]
outcomedata[,col_numero]<-as.numeric(outcomedata[,col_numero])
## Check that state and outcome are valid
if (!(state %in% outcomedata[,7])) {stop("invalid state")}
if (!(outcome %in% possible_outcome)){stop("invalid outcome")}
## Return hospital name in that state with lowest 30-day death
## rate
hospital_data<-subset(outcomedata[c(2,7,col_numero)],State==state,na.rm=TRUE)
num<-as.numeric(which(min(hospital_data[,3],na.rm=TRUE) == hospital_data[,3]))
sort(hospital_data$Hospital.Name[num])[1]
state<-"TX"
outcome<-"heart attack"
## Read outcome data
outcomedata<-read.csv("outcome-of-care-measures.csv", colClasses = "character", header=TRUE)
possible_outcome<-c("heart attack", "heart failure", "pneumonia")
outcome_col<-c(11,17,23)
col_numero<-outcome_col[possible_outcome==outcome]
outcomedata[,col_numero]<-as.numeric(outcomedata[,col_numero])
## Check that state and outcome are valid
if (!(state %in% outcomedata[,7])) {stop("invalid state")}
if (!(outcome %in% possible_outcome)){stop("invalid outcome")}
## Return hospital name in that state with lowest 30-day death
## rate
hospital_data<-subset(outcomedata[c(2,7,col_numero)],State==state,na.rm=TRUE)
num<-as.numeric(which(min(hospital_data[,3],na.rm=TRUE) == hospital_data[,3]))
sort(hospital_data$Hospital.Name[num])[1]
?which
vart<-c(86, 85, 70, 94, 86, 68)
summary(vart)
vart<-c(10,  8,  5 , 8 , 1, 10,  5,  6,  9,  2)
mean(vart, trim=0.1)
vart<-c(-4, 4, -5, -4, -3, -7, 5, -2, 6, -4)
sd(vart)
